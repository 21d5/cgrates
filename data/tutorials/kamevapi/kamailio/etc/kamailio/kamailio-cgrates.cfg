# Kamailio-CGRateS related route blocks


event_route[evapi:connection-new] {
    $sht(cgrconn=>cgr) = $evapi(srcaddr) + ":" + $evapi(srcport); # Detect presence of at least one connection
}

event_route[evapi:connection-closed] {
    $var(connClosed) = $evapi(srcaddr) + ":" + $evapi(srcport);
    if $sht(cgrconn=>cgr) == $var(connClosed) {
    	$sht(cgrconn=>cgr) = $null;
    }
}

event_route[evapi:message-received] {
	json_get_field("$evapi(msg)", "Event", "$var(Event)");
    route($(var(Event){s.rm,"})); # String characters are kept by json_get_field, remove them here
}

event_route[dialog:start] {
	route(CGR_CALL_START);
}

event_route[dialog:end] {
	route(CGR_CALL_END);
}

# Send AUTH_REQUEST to CGRateS
route[CGR_AUTH_REQUEST] {
	# Auth INVITEs with CGRateS
	if $sht(cgrconn=>cgr) == $null {
		sl_send_reply("503","Charging controller unreachable");
		exit;
	}
	switch ($fU) {
	case 1001:
		$dlg_var(cgrReqType) = "*prepaid";
		break;
	case 1002:
		$dlg_var(cgrReqType) = "*postpaid";
		break;
	default:
		$dlg_var(cgrReqType) = "*rated";
	}
	$dlg_var(cgrTenant) = "cgrates.org";
	$dlg_var(cgrAccount) = $fU;
	$dlg_var(cgrDestination) = $rU;
	evapi_async_relay("{\"event\":\"CGR_AUTH_REQUEST\",
		\"tr_index\":\"$T(id_index)\",
		\"tr_label\":\"$T(id_label)\",
		\"cgr_reqtype\":\"$dlg_var(cgrReqType)\",
		\"cgr_tenant\":\"$dlg_var(cgrTenant)\",
		\"cgr_account\":\"$dlg_var(cgrAccount)\",
		\"cgr_destination\":\"$dlg_var(cgrDestination)\",
		\"cgr_setuptime\":\"$TS\"}");
}

# Process AUTH_REPLY from CGRateS
route[CGR_AUTH_REPLY] {
	json_get_field("$evapi(msg)", "TransactionIndex", "$var(TransactionIndex)");
    json_get_field("$evapi(msg)", "TransactionLabel", "$var(TransactionLabel)");
    json_get_field("$evapi(msg)", "MaxSessionTime", "$var(MaxSessionTime)");
    json_get_field("$evapi(msg)", "AuthError", "$var(AuthError)");
	$var(id_index) = $(var(TransactionIndex){s.int});
	$var(id_label) = $(var(TransactionLabel){s.int});
	$var(max_session_time) = $(var(MaxSessionTime){s.int});
	t_continue("$var(id_index)", "$var(id_label)", "CGR_DIALOG_TIMEOUT");
}

# Check AUTH_REPLY for errors and set dialog timeout if necessary, call route(RELAY) after processing
route[CGR_DIALOG_TIMEOUT] {
	if $var(AuthError) != "null" { # null is converted in string by json_get_field
		xlog("CGR_AUTH_ERROR: $var(AuthError)");
		sl_send_reply("503","CGR_AUTH_ERROR");
		exit;
	}
	if $var(max_session_time) != -1 && !dlg_set_timeout("$var(max_session_time)") {
		sl_send_reply("503","CGR_MAX_SESSION_TIME_ERROR");
		exit;
	}
	route(RELAY);
}

# CGRateS request for session disconnect
route[CGR_SESSION_DISCONNECT] {
	json_get_field("$evapi(msg)", "HashEntry", "$var(HashEntry)");
    json_get_field("$evapi(msg)", "HashId", "$var(HashId)");
    json_get_field("$evapi(msg)", "Reason", "$var(Reason)");
	jsonrpc_exec('{"jsonrpc":"2.0","id":1, "method":"dlg.end_dlg","params":[$(var(HashEntry){s.rm,"}),$(var(HashId){s.rm,"})]}');
	#$jsonrpl($var(reply));
}

# Inform CGRateS about CALL_START (start prepaid sessions loops)
route[CGR_CALL_START] {
	if $sht(cgrconn=>cgr) == $null {
		xlog("Charging controller unreachable");
		exit;
	}
	evapi_async_relay("{\"event\":\"CGR_CALL_START\",
		\"callid\":\"$dlg(callid)\",
		\"from_tag\":\"$dlg(from_tag)\",
		\"h_entry\":\"$dlg(h_entry)\",
		\"h_id\":\"$dlg(h_id)\",
		\"cgr_reqtype\":\"$dlg_var(cgrReqType)\",
		\"cgr_tenant\":\"$dlg_var(cgrTenant)\",
		\"cgr_account\":\"$dlg_var(cgrAccount)\",
		\"cgr_destination\":\"$dlg_var(cgrDestination)\",
		\"cgr_answertime\":\"$TS\"}");
}

# Inform CGRateS about CALL_END (stop debit loops, perform accounting if desired in this way)
route[CGR_CALL_END] {
	if $sht(cgrconn=>cgr) == $null {
		xlog("Charging controller unreachable");
		exit;
	}
	$var(callDur) = $TS - $dlg(start_ts);
	evapi_async_relay("{\"event\":\"CGR_CALL_END\",
		\"callid\":\"$dlg(callid)\",
		\"from_tag\":\"$dlg(from_tag)\",
		\"cgr_reqtype\":\"$dlg_var(cgrReqType)\",
		\"cgr_tenant\":\"$dlg_var(cgrTenant)\",
		\"cgr_account\":\"$dlg_var(cgrAccount)\", 
		\"cgr_destination\":\"$dlg_var(cgrDestination)\",
		\"cgr_answertime\":\"$dlg(start_ts)\",
		\"cgr_duration\":\"$var(callDur)\"}");
}